Strategy
Categoria: Comportamental (Behavioral)
Design Patterns


"Os padrões de projeto comportamentais se
  preocupam com algoritmos, a atribuição
  de responsabilidades entre objetos e os
  padrões de comunicação entre eles."


Padrões: Chain of responsibility, Command, Interpreter, Iterator
Mediator, Memento, Observer, State, Strategy, Template method e Visitor.


Intencão Oficial: Definir uma familia de algoritmos, encapsular cada um deles e
fazê-los intercambiáveis. O strategy permite que o algoritmo varie independentemente
dos clientes que o utilizam.



Sobre o Strategy: 
- Separa a regra de negócio de variações de algoritmos que possam existir.
- Define uma familia de algoritmos cada uma com uma variação diferente.
- Usa composição para permitir a troca de algoritmos em tempo de execução.
- Permite a criação de vários algoritmos sem a necessidade de condicionais.



Aplicabilidade:

Use o Strategy quando:

- Você tiver variantes de um mesmo algoritmo e precisa trocar esses algoritmos em tempo de execução.
- Você precisar isolar a regra de negócio do algoritmo que deve ser aplicado (Aplicando o0 principio da responsabilidade única).
- Você perceber que está usando condicionais apenas para trocar o resultado final de um algoritmo.



Consequências:

Bom:
- Troca herança por composição.
- Separa a regra de negócio de algoritmos complexos.
- Aplica os principios do aberto/fechado e da responsabilidade única.

Ruim:
- Pode ser complexo criar toda uma hierarquia de classes para aplicar novos algoritmos.
- Você pode obter o mesmo resultado com funções caso a linguagem de programação permitir.
- O código cliente precisa conhecer as estratégias que vai usar.